/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.itmo.gen.api;

import ru.itmo.gen.model.Error;
import ru.itmo.gen.model.Organization;
import ru.itmo.gen.model.OrganizationArray;
import ru.itmo.gen.model.OrganizationFilters;
import ru.itmo.gen.model.OrganizationsQuantityByEmployeesGet200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "Organizations", description = "Управление организациями")
public interface OrganizationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_ORGANIZATIONS_DELETE_BY_FULLNAME_POST = "/organizations/delete/by-fullname";
    /**
     * POST /organizations/delete/by-fullname : Удалить организацию по полному имени
     * Удаляет одну (любую) организацию с указанным полным именем
     *
     * @param body  (optional)
     * @return Организация успешно удалена (status code 204)
     *         or Организация с указанным полным именем не найдена (status code 404)
     */
    @Operation(
        operationId = "organizationsDeleteByFullnamePost",
        summary = "Удалить организацию по полному имени",
        description = "Удаляет одну (любую) организацию с указанным полным именем",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Организация успешно удалена"),
            @ApiResponse(responseCode = "404", description = "Организация с указанным полным именем не найдена", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = OrganizationsApi.PATH_ORGANIZATIONS_DELETE_BY_FULLNAME_POST,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> organizationsDeleteByFullnamePost(
        @Parameter(name = "body", description = "") @Valid@Size(min = 1, max = 918)  @RequestBody(required = false) @Nullable String body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ORGANIZATIONS_FILTER_POST = "/organizations/filter";
    /**
     * POST /organizations/filter : Получить массив организаций с фильтрацией и сортировкой
     * Возвращает массив организаций с поддержкой фильтрации по любым полям, сортировки и постраничного вывода
     *
     * @param organizationFilters  (optional)
     * @return Успешное получение списка организаций (status code 200)
     *         or Неверные параметры запроса (status code 400)
     */
    @Operation(
        operationId = "organizationsFilterPost",
        summary = "Получить массив организаций с фильтрацией и сортировкой",
        description = "Возвращает массив организаций с поддержкой фильтрации по любым полям, сортировки и постраничного вывода",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешное получение списка организаций", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationArray.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверные параметры запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = OrganizationsApi.PATH_ORGANIZATIONS_FILTER_POST,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OrganizationArray> organizationsFilterPost(
        @Parameter(name = "OrganizationFilters", description = "") @Valid @RequestBody(required = false) @Nullable OrganizationFilters organizationFilters
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"size\" : 1, \"organizations\" : [ { \"postalAddress\" : { \"town\" : { \"x\" : 2.302136, \"name\" : \"name\", \"y\" : 7.061401241503109, \"z\" : 9 }, \"street\" : \"street\" }, \"employeesCount\" : 1, \"name\" : \"name\", \"coordinates\" : { \"x\" : -364, \"y\" : 1.4658129805029452 }, \"fullName\" : \"fullName\", \"annualTurnover\" : 1, \"id\" : 1, \"creationDate\" : \"2000-01-23\", \"type\" : \"PUBLIC\" }, { \"postalAddress\" : { \"town\" : { \"x\" : 2.302136, \"name\" : \"name\", \"y\" : 7.061401241503109, \"z\" : 9 }, \"street\" : \"street\" }, \"employeesCount\" : 1, \"name\" : \"name\", \"coordinates\" : { \"x\" : -364, \"y\" : 1.4658129805029452 }, \"fullName\" : \"fullName\", \"annualTurnover\" : 1, \"id\" : 1, \"creationDate\" : \"2000-01-23\", \"type\" : \"PUBLIC\" } ], \"page\" : 6, \"totalCount\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ORGANIZATIONS_ID_DELETE = "/organizations/{id}";
    /**
     * DELETE /organizations/{id} : Удалить организацию
     * Удаляет организацию по указанному идентификатору
     *
     * @param id  (required)
     * @return Организация успешно удалена (status code 204)
     *         or Организация не найдена (status code 404)
     */
    @Operation(
        operationId = "organizationsIdDelete",
        summary = "Удалить организацию",
        description = "Удаляет организацию по указанному идентификатору",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Организация успешно удалена"),
            @ApiResponse(responseCode = "404", description = "Организация не найдена", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = OrganizationsApi.PATH_ORGANIZATIONS_ID_DELETE,
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> organizationsIdDelete(
        @Min(1) @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ORGANIZATIONS_ID_GET = "/organizations/{id}";
    /**
     * GET /organizations/{id} : Получить организацию по ID
     * Возвращает организацию по указанному идентификатору
     *
     * @param id  (required)
     * @return Организация найдена (status code 200)
     *         or Неверный параметр запроса (status code 400)
     *         or Организация не найдена (status code 404)
     */
    @Operation(
        operationId = "organizationsIdGet",
        summary = "Получить организацию по ID",
        description = "Возвращает организацию по указанному идентификатору",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Организация найдена", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Organization.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверный параметр запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Организация не найдена", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = OrganizationsApi.PATH_ORGANIZATIONS_ID_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<Organization> organizationsIdGet(
        @Min(1) @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"postalAddress\" : { \"town\" : { \"x\" : 2.302136, \"name\" : \"name\", \"y\" : 7.061401241503109, \"z\" : 9 }, \"street\" : \"street\" }, \"employeesCount\" : 1, \"name\" : \"name\", \"coordinates\" : { \"x\" : -364, \"y\" : 1.4658129805029452 }, \"fullName\" : \"fullName\", \"annualTurnover\" : 1, \"id\" : 1, \"creationDate\" : \"2000-01-23\", \"type\" : \"PUBLIC\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ORGANIZATIONS_ID_PUT = "/organizations/{id}";
    /**
     * PUT /organizations/{id} : Обновить организацию
     * Обновляет данные организации по указанному идентификатору
     *
     * @param id  (required)
     * @param organization  (required)
     * @return Организация успешно обновлена (status code 200)
     *         or Неверные данные организации (status code 400)
     *         or Организация не найдена (status code 404)
     */
    @Operation(
        operationId = "organizationsIdPut",
        summary = "Обновить организацию",
        description = "Обновляет данные организации по указанному идентификатору",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Организация успешно обновлена", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Organization.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверные данные организации", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Организация не найдена", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = OrganizationsApi.PATH_ORGANIZATIONS_ID_PUT,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Organization> organizationsIdPut(
        @Min(1) @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Organization", description = "", required = true) @Valid @RequestBody Organization organization
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"postalAddress\" : { \"town\" : { \"x\" : 2.302136, \"name\" : \"name\", \"y\" : 7.061401241503109, \"z\" : 9 }, \"street\" : \"street\" }, \"employeesCount\" : 1, \"name\" : \"name\", \"coordinates\" : { \"x\" : -364, \"y\" : 1.4658129805029452 }, \"fullName\" : \"fullName\", \"annualTurnover\" : 1, \"id\" : 1, \"creationDate\" : \"2000-01-23\", \"type\" : \"PUBLIC\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ORGANIZATIONS_POST = "/organizations";
    /**
     * POST /organizations : Добавить новую организацию
     * Создает новую организацию в коллекции
     *
     * @param organization  (required)
     * @return Организация успешно создана (status code 201)
     *         or Неверные данные организации (status code 400)
     */
    @Operation(
        operationId = "organizationsPost",
        summary = "Добавить новую организацию",
        description = "Создает новую организацию в коллекции",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Организация успешно создана", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Organization.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверные данные организации", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = OrganizationsApi.PATH_ORGANIZATIONS_POST,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Organization> organizationsPost(
        @Parameter(name = "Organization", description = "", required = true) @Valid @RequestBody Organization organization
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"postalAddress\" : { \"town\" : { \"x\" : 2.302136, \"name\" : \"name\", \"y\" : 7.061401241503109, \"z\" : 9 }, \"street\" : \"street\" }, \"employeesCount\" : 1, \"name\" : \"name\", \"coordinates\" : { \"x\" : -364, \"y\" : 1.4658129805029452 }, \"fullName\" : \"fullName\", \"annualTurnover\" : 1, \"id\" : 1, \"creationDate\" : \"2000-01-23\", \"type\" : \"PUBLIC\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ORGANIZATIONS_QUANTITY_BY_EMPLOYEES_GET = "/organizations/quantity/by-employees";
    /**
     * GET /organizations/quantity/by-employees : Количество организаций по числу сотрудников
     * Возвращает количество организаций с указанным числом сотрудников
     *
     * @param quantity  (required)
     * @return Успешное получение количества (status code 200)
     *         or Неверный параметр запроса (status code 400)
     */
    @Operation(
        operationId = "organizationsQuantityByEmployeesGet",
        summary = "Количество организаций по числу сотрудников",
        description = "Возвращает количество организаций с указанным числом сотрудников",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешное получение количества", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationsQuantityByEmployeesGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверный параметр запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = OrganizationsApi.PATH_ORGANIZATIONS_QUANTITY_BY_EMPLOYEES_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<OrganizationsQuantityByEmployeesGet200Response> organizationsQuantityByEmployeesGet(
        @NotNull @Min(1) @Parameter(name = "quantity", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "quantity", required = true) Integer quantity
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"count\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ORGANIZATIONS_QUANTITY_BY_TURNOVER_GET = "/organizations/quantity/by-turnover";
    /**
     * GET /organizations/quantity/by-turnover : Количество организаций с оборотом меньше заданного
     * Возвращает количество организаций с годовым оборотом меньше указанного значения
     *
     * @param maxTurnover  (required)
     * @return Успешное получение количества (status code 200)
     *         or Неверный параметр запроса (status code 400)
     */
    @Operation(
        operationId = "organizationsQuantityByTurnoverGet",
        summary = "Количество организаций с оборотом меньше заданного",
        description = "Возвращает количество организаций с годовым оборотом меньше указанного значения",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешное получение количества", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationsQuantityByEmployeesGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверный параметр запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = OrganizationsApi.PATH_ORGANIZATIONS_QUANTITY_BY_TURNOVER_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<OrganizationsQuantityByEmployeesGet200Response> organizationsQuantityByTurnoverGet(
        @NotNull @Min(1L) @Parameter(name = "max-turnover", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "max-turnover", required = true) Long maxTurnover
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"count\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
